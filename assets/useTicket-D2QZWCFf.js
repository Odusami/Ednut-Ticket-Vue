import{u as d,i as w,q as f,m as v}from"./index-Cuf1Ri6K.js";const r=w([]);function g(){const{showToast:c}=d();if(typeof window<"u"){const e=localStorage.getItem("ticketapp_tickets");if(e)try{r.value=JSON.parse(e)}catch(t){console.error("Error loading tickets:",t),r.value=[]}}f(r,e=>{localStorage.setItem("ticketapp_tickets",JSON.stringify(e))},{deep:!0});const a=async e=>new Promise((t,o)=>{try{if(!e.title||!e.status)throw new Error("Title and status are required");if(!["open","in_progress","closed"].includes(e.status))throw new Error("Invalid status value");const i={id:Date.now().toString(),...e,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};r.value=[i,...r.value],c("Ticket created successfully!","success"),t(i)}catch(s){c(s.message,"error"),o(s)}}),n=async(e,t)=>new Promise((o,s)=>{try{if(t.title!==void 0&&!t.title.trim())throw new Error("Title is required");if(t.status&&!["open","in_progress","closed"].includes(t.status))throw new Error("Invalid status value");r.value=r.value.map(i=>i.id===e?{...i,...t,updatedAt:new Date().toISOString()}:i),c("Ticket updated successfully!","success"),o()}catch(i){c(i.message,"error"),s(i)}}),u=async e=>new Promise((t,o)=>{try{r.value=r.value.filter(s=>s.id!==e),c("Ticket deleted successfully","success"),t()}catch(s){c("Failed to delete ticket","error"),o(s)}}),l=e=>r.value.find(t=>t.id===e);return{tickets:v(()=>r.value),createTicket:a,updateTicket:n,deleteTicket:u,getTicket:l}}export{g as u};
